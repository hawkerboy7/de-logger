0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.37
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/dexter/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/dexter/.npm/de-logger/0.1.8-1/package.tgz', '.' ]
12 verbose tarball /home/dexter/.npm/de-logger/0.1.8-1/package.tgz
13 verbose folder .
14 info prepublish de-logger@0.1.8-1
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/dexter/.npm/1f1177db-tar.lock
17 silly lockFile c5eec107-pm-de-logger-0-1-8-1-package-tgz tar:///home/dexter/.npm/de-logger/0.1.8-1/package.tgz
18 verbose lock tar:///home/dexter/.npm/de-logger/0.1.8-1/package.tgz /home/dexter/.npm/c5eec107-pm-de-logger-0-1-8-1-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile c5eec107-pm-de-logger-0-1-8-1-package-tgz tar:///home/dexter/.npm/de-logger/0.1.8-1/package.tgz
22 silly lockFile c5eec107-pm-de-logger-0-1-8-1-package-tgz tar:///home/dexter/.npm/de-logger/0.1.8-1/package.tgz
23 silly lockFile f1fe7f2e-er-npm-de-logger-0-1-8-1-package /home/dexter/.npm/de-logger/0.1.8-1/package
24 verbose lock /home/dexter/.npm/de-logger/0.1.8-1/package /home/dexter/.npm/f1fe7f2e-er-npm-de-logger-0-1-8-1-package.lock
25 silly lockFile f1fe7f2e-er-npm-de-logger-0-1-8-1-package /home/dexter/.npm/de-logger/0.1.8-1/package
26 silly lockFile f1fe7f2e-er-npm-de-logger-0-1-8-1-package /home/dexter/.npm/de-logger/0.1.8-1/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'de-logger',
29 silly publish   version: '0.1.8-1',
29 silly publish   description: 'Log different types of events in the node.js console with different colors and alignment',
29 silly publish   main: 'build/server/app.js',
29 silly publish   author: { name: 'Dexter Esajas', email: 'dexter.esajas@gmail.com' },
29 silly publish   license: 'MIT',
29 silly publish   devDependencies: { 'id-builder': '^1.6.0' },
29 silly publish   repository: { type: 'git', url: 'https://github.com/hawkerboy7/de-logger' },
29 silly publish   bugs:
29 silly publish    { url: 'https://github.com/hawkerboy7/de-logger/issues',
29 silly publish      email: 'dexter.esajas@gmail.com' },
29 silly publish   keywords:
29 silly publish    [ 'logger',
29 silly publish      'log',
29 silly publish      'console',
29 silly publish      'node.js',
29 silly publish      'nodejs',
29 silly publish      'color',
29 silly publish      'colors',
29 silly publish      'colour',
29 silly publish      'colours',
29 silly publish      'alignment',
29 silly publish      'align' ],
29 silly publish   readme: '# de-logger\n## Getting Started\n\nInstall de-logger using npm install\n```javascript\nnpm install de-logger --save\n```\n\nRequire _de-logger_ in your project and you\'re ready to go!\n```javascript\nvar log = require(\'de-logger\');\n```\n\n## Usage\nIt basically works the same way as console.log() only it ads colors and alignment to the messages. The first agument is assumed to be the name of the data you want to log. The rest of the arguments should be the data you want to log. You may also provide one argument containing data. This way the log will be nameless.\n\n## Example 1\nThe examples are written in coffeescript. For an example in javascript check the [examples folder](https://github.com/hawkerboy7/de-logger/tree/master/build/examples).\n```coffeescript\nlog = require \'de-logger\'\n\nlog.func  \'Func\' , \'These\'\nlog.debug \'Debug\', \'are\'\nlog.info  \'Info\' , \'all the\'\nlog.event \'Event\', \'basic\'\nlog.warn  \'Warn\' , \'log\'\nlog.error \'Error\', \'commands\'\n```\n![basics](https://cloud.githubusercontent.com/assets/2284480/6832640/1208953c-d328-11e4-8cba-07487507eade.png)\n\n## API\n\n### set({config})\nChange the default configuration by providing a config object ([example 2](https://github.com/hawkerboy7/de-logger/tree/master/build/examples)). This can be done at any time during you project and multiple times (which is shown in [example 4](https://github.com/hawkerboy7/de-logger/tree/master/build/examples)). This way data in your project can be logged differently at any point in your project.\n\n```coffeescript\n# Example 2 - Default config\nlog = require \'de-logger\'\n\nconfig =\n  ms:       false\n  date:     false\n  time:     false\n  align:    true\n  space:    0\n  whipe:    false\n  terminal: true\n\nlog.set config\n```\n__ms__ _true / false_\nAdd miliseconds to time (only works if time is true)\n\n__date__ _true / false_\nShow the current date\n\n__time__ _true / false_\nShow the current time\n\n__align__ _true / false_\nWill make sure the data logged after the name is in alignment with the largest name provided.\n```javascript\n[green] info  Name_short → First value          // space = 10\n[green] info  Name_normal → Second value        // space = 11\n[green] info  Name        → Third value         // space = 11\n[green] info  Name_even_lager → Fourth value    // space = 15\n[green] info  name_short      → Fifth value     // space = 15\n[green] info  hi              → Sixth value     // space = 15\n```\n__space__ _int_\nThe amount of characters the name area should contain. Default is 0 and grows whenever a name with a bigger length is provided (as is shown in the example above) but you can choose to start with another number.\n\n__whipe__ _true / false_\nThis will also clear the console history\n\n__terminal__ _true / false_\nShow messages in the terminal\n\n___Do not show messages from a specific function___<br>\nYou can also turn of a specific log function. Remember they will stay turned off untill you swich them on again somewhere in your code ([example 3](https://github.com/hawkerboy7/de-logger/tree/master/build/examples)).\n```coffeescript\n# Example 3\nlog = require \'de-logger\'\n\nlog.set\n  func:\n    display: false\n  event:\n    display: false\n```\n\n### clear()\nClears the console. Based on your config your console scroll history will be wiped too.\n\n### func(*)\nIdentifing which function is triggered (suppling the function name is still required for now)\n\n### debug(*)\nDisplay debug information\n\n### info(*)\nDisplay general information like which port your webserver is running on\n\n### event(*)\nKeep track of specific (socket) events.\n\n### warn(*)\nShow warnings\n\n### error(*)\nShow errors\n\n\\* The arguments that should be provided are explained in [Usage](https://github.com/hawkerboy7/de-logger#usage).\n\n\n## Example 4\n```coffeescript\nlog = require \'de-logger\'\n\n# Set config to also whipe the history of the console\nlog.set\n  whipe: true\n\n# Clear the console (and whipe it\'s history)\nlog.clear()\n\n# Set some data variables\ndata1 = a: 1, b: 2, c: 3\ndata2 = a: 4, b: 5, c: 6\n\n# Log a function and a debug message\nlog.func \'First function\'\nlog.debug \'Debugging\', \'Debug message\', data1\n\n# (Re)set config\nlog.set\n\n  # Show time\n  time: true\n\n  # Turn off func and debug messages\n  func:\n    display: false\n  debug:\n    display: false\n\n# Log a function, debug, info and event message\nlog.func \'First function\'                       # This will not be displayed\nlog.debug \'Debugging\', \'Debug message\', data1   # This will not be displayed\nlog.info \'Webserver\', \'Running at port: 8000\'\nlog.event \'Gui input\', data2\n\n# (Re)set config\nlog.set\n\n  # Show date\n  date: true\n\n# Log a warning and an error\nlog.warn \'Usermodel\', \'Cannot find a user id\'\nlog.error \'Mongodb\', \'Connection couldn\\\'t be established\'\n```\n![example 4](https://cloud.githubusercontent.com/assets/2284480/6836823/25cb4d30-d346-11e4-849b-497d6dc1948c.png)\n\nYou can still provide your data as the only argument\n```coffeescript\n# Example 5\nlog = require \'de-logger\'\n\ndata1 =\n  a: 1\n  b: 2\n  c: 3\n\ndata2 =\n  a: 4\n  b: 5\n  c: 6\n\nlog.info(data1);\n\n# (Re)Set config\nlog.set\n  time: true\n  ms: true\n\nlog.event(data2);\n```\nOutput<br>\n![example5](https://cloud.githubusercontent.com/assets/2284480/6837069/6c486368-d348-11e4-8ef2-82ac81920c5e.png)\n\n\n## Planned Features\n\n### Save log messages to a log file\n\n### Individual config\nConfigure methodes individually (with regard to time, date and ms).\n\n### Change the func method\n~~Make method func self aware. So if it is possible let the func method figure out the name of the function it is in.~~ This doesn\'t appear to be possible (in .coffee) since it only uses anonymous functions.',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: '41938c1bfd37f8496e252e683e31e538cc3aab8c',
29 silly publish   homepage: 'https://github.com/hawkerboy7/de-logger',
29 silly publish   _id: 'de-logger@0.1.8-1',
29 silly publish   scripts: {},
29 silly publish   _shasum: 'f9d5f57933e7abf47e8b275dbedbf984cfe15f7b',
29 silly publish   _from: '.' }
30 verbose request where is /de-logger
31 verbose request registry https://registry.npmjs.org/
32 verbose request id f2ef8eaf6dd76994
33 verbose url raw /de-logger
34 verbose url resolving [ 'https://registry.npmjs.org/', './de-logger' ]
35 verbose url resolved https://registry.npmjs.org/de-logger
36 verbose request where is https://registry.npmjs.org/de-logger
37 info trying registry request attempt 1 at 23:45:39
38 http PUT https://registry.npmjs.org/de-logger
39 http 409 https://registry.npmjs.org/de-logger
40 verbose request where is /de-logger?write=true
41 verbose request registry https://registry.npmjs.org/
42 verbose url raw /de-logger?write=true
43 verbose url resolving [ 'https://registry.npmjs.org/', './de-logger?write=true' ]
44 verbose url resolved https://registry.npmjs.org/de-logger?write=true
45 verbose request where is https://registry.npmjs.org/de-logger?write=true
46 info trying registry request attempt 1 at 23:45:41
47 http GET https://registry.npmjs.org/de-logger?write=true
48 http 200 https://registry.npmjs.org/de-logger?write=true
49 error publish fail Cannot publish over existing version.
49 error publish fail Update the 'version' field in package.json and try again.
49 error publish fail
49 error publish fail If the previous version was published in error, see:
49 error publish fail     npm help unpublish
49 error publish fail
49 error publish fail To automatically increment version numbers, see:
49 error publish fail     npm help version
50 error System Linux 3.13.0-48-generic
51 error command "/usr/bin/node" "/usr/bin/npm" "publish"
52 error cwd /home/dexter/programming/de-logger
53 error node -v v0.10.37
54 error npm -v 1.4.28
55 error code EPUBLISHCONFLICT
56 verbose exit [ 1, true ]
